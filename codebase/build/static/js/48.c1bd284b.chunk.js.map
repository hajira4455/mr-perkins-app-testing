{"version":3,"sources":["views/forms/form-elements/number-input/NumberInputStep.js","views/forms/form-elements/number-input/NumberInputWrap.js","views/forms/form-elements/number-input/NumberInputBasic.js","views/forms/form-elements/number-input/NumberInputSizes.js","views/forms/form-elements/number-input/NumberInputWidth.js","views/forms/form-elements/number-input/NumberInputInline.js","views/forms/form-elements/number-input/NumberInputMinMax.js","views/forms/form-elements/number-input/NumberInputStates.js","views/forms/form-elements/number-input/NumberInputVertical.js","views/forms/form-elements/number-input/NumberInputCustomIcon.js","views/forms/form-elements/number-input/index.js","@core/components/breadcrumbs/index.js","@core/components/number-input/index.js"],"names":["NumberInputStep","Card","CardHeader","CardTitle","tag","CardBody","CardText","Label","for","id","max","step","NumberInputWrap","wrap","NumberInputBasic","useState","count","setCount","className","value","onChange","Alert","color","NumberInputSizes","FormGroup","size","NumberInputWidth","style","width","NumberInputInline","NumberInputMinMax","min","NumberInputStates","Row","Col","md","disabled","readonly","NumberInputVertical","vertical","NumberInputCustomIcons","downIcon","upIcon","NumberInput","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","lg","NumberInputCustomIcon","BreadCrumbs","props","breadCrumbParent2","breadCrumbParent3","to","active","right","Link","onDecrement","onIncrement","inputClassName","rest","handleDecrement","e","preventDefault","handleIncrement","useEffect","classnames","addonType","onClick","type","readOnly","onKeyDown","keyCode","Number","target","bsSize","defaultProps","Infinity"],"mappings":"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","file":"static/js/48.c1bd284b.chunk.js","sourcesContent":["import NumberInput from '@components/number-input'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Label } from 'reactstrap'\r\n\r\nconst NumberInputStep = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Step</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          The default step increment is <code>1</code>, and can be changed via the <code>step</code> prop (decimal\r\n          values allowed). When <code>step</code> is set, the value will always be a multiple of the step size plus the\r\n          minimum value.\r\n        </CardText>\r\n        <Label for='step-number-input'>Number Input with step of 0.25</Label>\r\n        <NumberInput id='step-number-input' max={10} step={0.25} />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NumberInputStep\r\n","import NumberInput from '@components/number-input'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Label } from 'reactstrap'\r\n\r\nconst NumberInputWrap = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Number Wrapping</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          To allow the Number Input to wrap from max to min when incrementing (or min to max when decrementing), set the\r\n          <code>wrap</code> prop to <code>true</code>.\r\n        </CardText>\r\n        <Label for='wrap-number-input'>Wrapping value Number Input</Label>\r\n        <NumberInput id='wrap-number-input' max={10} wrap />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NumberInputWrap\r\n","import { useState } from 'react'\r\nimport NumberInput from '@components/number-input'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Label, Alert } from 'reactstrap'\r\n\r\nconst NumberInputBasic = () => {\r\n  const [count, setCount] = useState(0)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Basic</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          Number Input is used for incrementing or decrementing a numerical value within a range of a minimum and\r\n          maximum number, with optional step value.\r\n        </CardText>\r\n\r\n        <div className='mt-2'>\r\n          <Label for='basic-number-input'>Number Input</Label>\r\n          <NumberInput id='basic-number-input' value={count} onChange={count => setCount(count)} />\r\n          <CardText className='mt-1'>Value: {count}</CardText>\r\n          <Alert className='mb-0' color='success'>\r\n            <div className='alert-body'>\r\n              <span>The ArrowUp and ArrowDown keys can be used to increment or decrement the value. </span>\r\n            </div>\r\n          </Alert>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\nexport default NumberInputBasic\r\n","import NumberInput from '@components/number-input'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Label, FormGroup } from 'reactstrap'\r\n\r\nconst NumberInputSizes = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Sizes</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          Just like other Bootstrap Components, <code>&lt;NumberInput /&gt;</code> supports small and large sizing via\r\n          setting the <code>size</code> prop to either <code>'sm'</code> or <code>'lg'</code>, respectively.\r\n        </CardText>\r\n\r\n        <FormGroup>\r\n          <Label for='lg-number-input'>Large Number Input</Label>\r\n          <NumberInput id='lg-number-input' size='lg' />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for='default-number-input'>Default Number Input</Label>\r\n          <NumberInput id='default-number-input' />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for='sm-number-input'>Small Number Input</Label>\r\n          <NumberInput id='sm-number-input' size='sm' />\r\n        </FormGroup>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NumberInputSizes\r\n","import NumberInput from '@components/number-input'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, FormGroup } from 'reactstrap'\r\n\r\nconst NumberInputWidth = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Width</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          You can control width via utility classes with prop <code>className</code> such as <code>w-50</code>,{' '}\r\n          <code>w-75</code>, <code>w-100</code>, or use <code>style</code> prop to set the width.\r\n        </CardText>\r\n        <FormGroup>\r\n          <NumberInput style={{ width: '200px' }} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <NumberInput className='w-50' />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <NumberInput className='w-75' />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <NumberInput className='w-100' />\r\n        </FormGroup>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NumberInputWidth\r\n","import NumberInput from '@components/number-input'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Label, FormGroup } from 'reactstrap'\r\n\r\nconst NumberInputInline = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Inline</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          Use <code>flex</code> as wrapper to show Number Input as inline component\r\n        </CardText>\r\n        <FormGroup className='d-flex align-items-center'>\r\n          <Label for='inline-number-input'>Inline Number Input</Label>\r\n          <NumberInput className='w-auto ml-1' id='inline-number-input' />\r\n        </FormGroup>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NumberInputInline\r\n","import NumberInput from '@components/number-input'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Label } from 'reactstrap'\r\n\r\nconst NumberInputMinMax = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Min & Max</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          Number Input have a default range from <code>1</code> to <code>100</code>, which can be changed by setting the\r\n          <code>min</code> and <code>max</code> props.\r\n        </CardText>\r\n        <Label for='min-max-number-input'>Number Input with min 0 and max 10</Label>\r\n        <NumberInput id='min-max-number-input' min={0} max={10} />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NumberInputMinMax\r\n","import NumberInput from '@components/number-input'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Label, Row, Col } from 'reactstrap'\r\n\r\nconst NumberInputStates = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Disabled & Readonly states</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          Setting the prop <code>disabled</code> places the component in a disabled, non-interactive state. The{' '}\r\n          <code>readonly</code>\r\n          prop places the component in a readonly state (focusable, but the value cannot be changed by the user).\r\n        </CardText>\r\n        <Row>\r\n          <Col md='6' className='mb-md-0 mb-2'>\r\n            <Label for='disabled-number-input'>Disabled Number Input</Label>\r\n            <NumberInput disabled id='disabled-number-input' />\r\n          </Col>\r\n          <Col md='6'>\r\n            <Label for='readonly-number-input'>Readonly Number Input</Label>\r\n            <NumberInput readonly id='readonly-number-input' />\r\n          </Col>\r\n        </Row>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NumberInputStates\r\n","import NumberInput from '@components/number-input'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Label } from 'reactstrap'\r\n\r\nconst NumberInputVertical = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Vertical</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          Use prop <code>vertical</code> for a vertical Number Input.\r\n        </CardText>\r\n        <div className='d-flex justify-content-between flex-wrap'>\r\n          <NumberInput id='wrap-number-input' vertical min={1} max={10} size='lg' />\r\n          <NumberInput id='wrap-number-input' vertical min={1} max={10} />\r\n          <NumberInput id='wrap-number-input' vertical min={1} max={10} size='sm' />\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NumberInputVertical\r\n","import NumberInput from '@components/number-input'\r\nimport { ChevronDown, ChevronUp, ChevronLeft, ChevronRight } from 'react-feather'\r\nimport { Card, CardHeader, CardTitle, CardBody, CardText, Row, Col } from 'reactstrap'\r\n\r\nconst NumberInputCustomIcons = () => {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Custom Icons</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <CardText>\r\n          Use props <code>upIcon</code> or <code>downIcon</code> to change <code>increment</code> and{' '}\r\n          <code>decrement</code> icons.\r\n        </CardText>\r\n        <Row>\r\n          <Col md='6' className='mb-md-0 mb-2'>\r\n            <NumberInput downIcon={<ChevronDown size={14} />} upIcon={<ChevronUp size={14} />} />\r\n          </Col>\r\n          <Col md='6'>\r\n            <NumberInput downIcon={<ChevronLeft size={14} />} upIcon={<ChevronRight size={14} />} />\r\n          </Col>\r\n        </Row>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NumberInputCustomIcons\r\n","import { Fragment } from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport Breadcrumbs from '@components/breadcrumbs'\r\nimport NumberInputStep from './NumberInputStep'\r\nimport NumberInputWrap from './NumberInputWrap'\r\nimport NumberInputBasic from './NumberInputBasic'\r\nimport NumberInputSizes from './NumberInputSizes'\r\nimport NumberInputWidth from './NumberInputWidth'\r\nimport NumberInputInline from './NumberInputInline'\r\nimport NumberInputMinMax from './NumberInputMinMax'\r\nimport NumberInputStates from './NumberInputStates'\r\nimport NumberInputVertical from './NumberInputVertical'\r\nimport NumberInputCustomIcons from './NumberInputCustomIcon'\r\n\r\nconst NumberInput = () => {\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs breadCrumbTitle='Number Input' breadCrumbParent='Form Elements' breadCrumbActive='Number Input' />\r\n      <Row className='match-height'>\r\n        <Col md='6' sm='12'>\r\n          <NumberInputBasic />\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <NumberInputSizes />\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <NumberInputMinMax />\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <NumberInputStep />\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <NumberInputWrap />\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <NumberInputVertical />\r\n        </Col>\r\n        <Col lg='6' sm='12'>\r\n          <NumberInputInline />\r\n        </Col>\r\n        <Col lg='6' sm='12'>\r\n          <NumberInputStates />\r\n        </Col>\r\n        <Col sm='12'>\r\n          <NumberInputCustomIcons />\r\n        </Col>\r\n        <Col sm='12'>\r\n          <NumberInputWidth />\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default NumberInput\r\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\r\n        <div className='form-group breadcrum-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' right>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <CheckSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='mr-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='mr-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired\r\n}\r\n","// ** React Imports\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Plus, Minus } from 'react-feather'\r\nimport { useState, useEffect } from 'react'\r\nimport { InputGroup, InputGroupAddon, Input, Button } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport './number-input.scss'\r\n\r\n// ** Keycode Vars\r\nconst KEYCODE_UP = 38\r\nconst KEYCODE_DOWN = 40\r\n\r\nconst NumberInput = props => {\r\n  // ** Props\r\n  const {\r\n    min,\r\n    max,\r\n    step,\r\n    size,\r\n    wrap,\r\n    value,\r\n    style,\r\n    upIcon,\r\n    disabled,\r\n    readonly,\r\n    onChange,\r\n    downIcon,\r\n    vertical,\r\n    className,\r\n    onDecrement,\r\n    onIncrement,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [count, setCount] = useState(value || min)\r\n\r\n  // ** Handle btn down click\r\n  const handleDecrement = e => {\r\n    e.preventDefault()\r\n    if (!disabled && !readonly) {\r\n      // ** If count is equals or smaller than min then return and do nothing\r\n      if (!wrap && count <= min) {\r\n        return\r\n      }\r\n\r\n      // ** Returns the decreased count based on wrap & and min prop\r\n      const countCondition = () => {\r\n        if (count - step < min) {\r\n          if (wrap) {\r\n            return max\r\n          } else {\r\n            return min\r\n          }\r\n        } else {\r\n          return count - step\r\n        }\r\n      }\r\n\r\n      setCount(countCondition())\r\n\r\n      if (onDecrement) {\r\n        onIncrement(count)\r\n      }\r\n    }\r\n  }\r\n\r\n  // ** Handle btn up click\r\n  const handleIncrement = e => {\r\n    e.preventDefault()\r\n    if (!disabled && !readonly) {\r\n      // ** If count is equals or larger than min then return and do nothing\r\n      if (!wrap && count >= max) {\r\n        return\r\n      }\r\n\r\n      // ** Returns the Increased count based on wrap & and max prop\r\n      const countCondition = () => {\r\n        if (count + step > max) {\r\n          if (wrap) {\r\n            return min\r\n          } else {\r\n            return max\r\n          }\r\n        } else {\r\n          return count + step\r\n        }\r\n      }\r\n\r\n      setCount(countCondition())\r\n\r\n      if (onIncrement) {\r\n        onIncrement(count)\r\n      }\r\n    }\r\n  }\r\n\r\n  // ** Handle input change\r\n  const handleInputChange = e => {\r\n    setCount(Number(e.target.value))\r\n  }\r\n\r\n  // ** Handle Arrow Up & Down\r\n  const handleKeyDown = e => {\r\n    e.preventDefault()\r\n    if (!readonly) {\r\n      if (e.keyCode === KEYCODE_UP) {\r\n        handleIncrement()\r\n      }\r\n      if (e.keyCode === KEYCODE_DOWN) {\r\n        handleDecrement()\r\n      }\r\n    }\r\n  }\r\n\r\n  // ** UseEffect based on user passed onChange\r\n  useEffect(() => {\r\n    if (onChange) {\r\n      onChange(count)\r\n    }\r\n  }, [count])\r\n\r\n  return (\r\n    <InputGroup\r\n      className={classnames('number-input', {\r\n        disabled,\r\n        readonly,\r\n        [className]: className,\r\n        'vertical-number-input': vertical,\r\n        [`vertical-number-input-${size}`]: vertical && size\r\n      })}\r\n      {...(style ? { style } : {})}\r\n    >\r\n      <InputGroupAddon addonType='prepend' onClick={handleDecrement}>\r\n        <Button\r\n          className='btn-icon'\r\n          color='transparent'\r\n          {...(size ? { size } : {})}\r\n          disabled={(!wrap && count <= min) || disabled || readonly}\r\n        >\r\n          {downIcon}\r\n        </Button>\r\n      </InputGroupAddon>\r\n      <Input\r\n        {...rest}\r\n        type='number'\r\n        value={count}\r\n        disabled={disabled}\r\n        readOnly={readonly}\r\n        onKeyDown={handleKeyDown}\r\n        onChange={handleInputChange}\r\n        className={classnames({\r\n          [inputClassName]: inputClassName\r\n        })}\r\n        {...(size ? { bsSize: size } : {})}\r\n      />\r\n      <InputGroupAddon addonType='append' onClick={handleIncrement}>\r\n        <Button\r\n          className='btn-icon'\r\n          color='transparent'\r\n          {...(size ? { size } : {})}\r\n          disabled={(!wrap && count >= max) || disabled || readonly}\r\n        >\r\n          {upIcon}\r\n        </Button>\r\n      </InputGroupAddon>\r\n    </InputGroup>\r\n  )\r\n}\r\n\r\nexport default NumberInput\r\n\r\n// ** Default Props\r\nNumberInput.defaultProps = {\r\n  min: 1,\r\n  step: 1,\r\n  wrap: false,\r\n  max: Infinity,\r\n  disabled: false,\r\n  readonly: false,\r\n  downIcon: <Minus size={14} />,\r\n  upIcon: <Plus size={14} />\r\n}\r\n\r\n// ** PropTypes\r\nNumberInput.propTypes = {\r\n  wrap: PropTypes.bool,\r\n  min: PropTypes.number,\r\n  max: PropTypes.number,\r\n  step: PropTypes.number,\r\n  value: PropTypes.number,\r\n  style: PropTypes.object,\r\n  vertical: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  readonly: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n  upIcon: PropTypes.element,\r\n  downIcon: PropTypes.element,\r\n  className: PropTypes.string,\r\n  onDecrement: PropTypes.func,\r\n  onIncrement: PropTypes.func,\r\n  inputClassName: PropTypes.string,\r\n  size: PropTypes.oneOf(['sm', 'lg'])\r\n}\r\n"],"sourceRoot":""}